diff --git a/node_modules/aleo-wasm-bundler/dist/index.cjs.js b/node_modules/aleo-wasm-bundler/dist/index.cjs.js
index 19bf29b..49a30f8 100644
--- a/node_modules/aleo-wasm-bundler/dist/index.cjs.js
+++ b/node_modules/aleo-wasm-bundler/dist/index.cjs.js
@@ -15,10 +15,6 @@ function getAugmentedNamespace(n) {
 	return a;
 }
 
-var global$1 = (typeof global !== "undefined" ? global :
-  typeof self !== "undefined" ? self :
-  typeof window !== "undefined" ? window : {});
-
 let wasm;
 
 // TextEncoder/TextDecoder polyfills for utf-8 - an implementation of TextEncoder/TextDecoder APIs
@@ -896,40 +892,11 @@ class Transaction {
 }
 
 async function load(module, imports) {
-    if (typeof Response === 'function' && module instanceof Response) {
-        if (typeof WebAssembly.instantiateStreaming === 'function') {
-            try {
-                return await WebAssembly.instantiateStreaming(module, imports);
-
-            } catch (e) {
-                if (module.headers.get('Content-Type') != 'application/wasm') {
-                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
-
-                } else {
-                    throw e;
-                }
-            }
-        }
-
-        const bytes = await module.arrayBuffer();
-        return await WebAssembly.instantiate(bytes, imports);
-
-    } else {
-        const instance = await WebAssembly.instantiate(module, imports);
-
-        if (instance instanceof WebAssembly.Instance) {
-            return { instance, module };
-
-        } else {
-            return instance;
-        }
-    }
+    const instance = await WebAssembly.instantiate(module, imports);
+    return { instance, module };
 }
 
 async function init(input) {
-    if (typeof input === 'undefined') {
-        input = new URL('aleo_wasm_bg.wasm', (typeof document === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : (document.currentScript && document.currentScript.src || new URL('index.cjs.js', document.baseURI).href)));
-    }
     const imports = {};
     imports.wbg = {};
     imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
@@ -1021,7 +988,7 @@ async function init(input) {
         return addHeapObject(ret);
     }, arguments) };
     imports.wbg.__wbg_global_e7669da72fd7f239 = function() { return handleError(function () {
-        var ret = global$1.global;
+        var ret = global.global;
         return addHeapObject(ret);
     }, arguments) };
     imports.wbg.__wbindgen_is_undefined = function(arg0) {
@@ -1059,13 +1026,7 @@ async function init(input) {
         return addHeapObject(ret);
     };
 
-    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
-        input = fetch(input);
-    }
-
-
-
-    const { instance, module } = await load(await input, imports);
+    const { instance, module } = await load(input, imports);
 
     wasm = instance.exports;
     init.__wbindgen_wasm_module = module;
