diff --git a/node_modules/aleo-wasm-bundler/dist/index.js b/node_modules/aleo-wasm-bundler/dist/index.js
index 637d483..598d122 100644
--- a/node_modules/aleo-wasm-bundler/dist/index.js
+++ b/node_modules/aleo-wasm-bundler/dist/index.js
@@ -913,40 +913,11 @@
 	}
 
 	async function load(module, imports) {
-	    if (typeof Response === 'function' && module instanceof Response) {
-	        if (typeof WebAssembly.instantiateStreaming === 'function') {
-	            try {
-	                return await WebAssembly.instantiateStreaming(module, imports);
-
-	            } catch (e) {
-	                if (module.headers.get('Content-Type') != 'application/wasm') {
-	                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
-
-	                } else {
-	                    throw e;
-	                }
-	            }
-	        }
-
-	        const bytes = await module.arrayBuffer();
-	        return await WebAssembly.instantiate(bytes, imports);
-
-	    } else {
-	        const instance = await WebAssembly.instantiate(module, imports);
-
-	        if (instance instanceof WebAssembly.Instance) {
-	            return { instance, module };
-
-	        } else {
-	            return instance;
-	        }
-	    }
+		const instance = await WebAssembly.instantiate(module, imports);
+		return { instance, module };
 	}
 
 	async function init(input) {
-	    if (typeof input === 'undefined') {
-	        input = new URL('aleo_wasm_bg.wasm', (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('index.js', document.baseURI).href)));
-	    }
 	    const imports = {};
 	    imports.wbg = {};
 	    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
@@ -1076,13 +1047,7 @@
 	        return addHeapObject(ret);
 	    };
 
-	    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
-	        input = fetch(input);
-	    }
-
-
-
-	    const { instance, module } = await load(await input, imports);
+	    const { instance, module } = await load(input, imports);
 
 	    wasm = instance.exports;
 	    init.__wbindgen_wasm_module = module;
