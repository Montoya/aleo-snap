diff --git a/node_modules/aleo-wasm-bundler/dist/index.js b/node_modules/aleo-wasm-bundler/dist/index.js
index 0e28cbd..9cdcec8 100644
--- a/node_modules/aleo-wasm-bundler/dist/index.js
+++ b/node_modules/aleo-wasm-bundler/dist/index.js
@@ -21,6 +21,104 @@
 
 	let wasm;
 
+// TextEncoder/TextDecoder polyfills for utf-8 - an implementation of TextEncoder/TextDecoder APIs
+// Written in 2013 by Viktor Mukhachev <vic99999@yandex.ru>
+// To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
+// You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
+
+// Some important notes about the polyfill below:
+// Native TextEncoder/TextDecoder implementation is overwritten
+// String.prototype.codePointAt polyfill not included, as well as String.fromCodePoint
+// TextEncoder.prototype.encode returns a regular array instead of Uint8Array
+// No options (fatal of the TextDecoder constructor and stream of the TextDecoder.prototype.decode method) are supported.
+// TextDecoder.prototype.decode does not valid byte sequences
+// This is a demonstrative implementation not intended to have the best performance
+
+// http://encoding.spec.whatwg.org/#textencoder
+
+// http://encoding.spec.whatwg.org/#textencoder
+
+function TextEncoder() {
+}
+
+TextEncoder.prototype.encode = function (string) {
+  var octets = [];
+  if (!string) {
+    return octets; 
+  }
+  var length = string.length;
+  var i = 0;
+  while (i < length) {
+    var codePoint = string.codePointAt(i);
+    var c = 0;
+    var bits = 0;
+    if (codePoint <= 0x0000007F) {
+      c = 0;
+      bits = 0x00;
+    } else if (codePoint <= 0x000007FF) {
+      c = 6;
+      bits = 0xC0;
+    } else if (codePoint <= 0x0000FFFF) {
+      c = 12;
+      bits = 0xE0;
+    } else if (codePoint <= 0x001FFFFF) {
+      c = 18;
+      bits = 0xF0;
+    }
+    octets.push(bits | (codePoint >> c));
+    c -= 6;
+    while (c >= 0) {
+      octets.push(0x80 | ((codePoint >> c) & 0x3F));
+      c -= 6;
+    }
+    i += codePoint >= 0x10000 ? 2 : 1;
+  }
+  return octets;
+};
+
+function TextDecoder() {
+}
+
+TextDecoder.prototype.decode = function (octets) {
+  var string = "";
+  if (!octets) {
+    return string; 
+  }
+  var i = 0;
+  while (i < octets.length) {
+    var octet = octets[i];
+    var bytesNeeded = 0;
+    var codePoint = 0;
+    if (octet <= 0x7F) {
+      bytesNeeded = 0;
+      codePoint = octet & 0xFF;
+    } else if (octet <= 0xDF) {
+      bytesNeeded = 1;
+      codePoint = octet & 0x1F;
+    } else if (octet <= 0xEF) {
+      bytesNeeded = 2;
+      codePoint = octet & 0x0F;
+    } else if (octet <= 0xF4) {
+      bytesNeeded = 3;
+      codePoint = octet & 0x07;
+    }
+    if (octets.length - i - bytesNeeded > 0) {
+      var k = 0;
+      while (k < bytesNeeded) {
+        octet = octets[i + k + 1];
+        codePoint = (codePoint << 6) | (octet & 0x3F);
+        k += 1;
+      }
+    } else {
+      codePoint = 0xFFFD;
+      bytesNeeded = octets.length - i;
+    }
+    string += String.fromCodePoint(codePoint);
+    i += bytesNeeded + 1;
+  }
+  return string
+};
+
 	let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });
 
 	cachedTextDecoder.decode();
@@ -815,40 +913,11 @@
 	}
 
 	async function load(module, imports) {
-	    if (typeof Response === 'function' && module instanceof Response) {
-	        if (typeof WebAssembly.instantiateStreaming === 'function') {
-	            try {
-	                return await WebAssembly.instantiateStreaming(module, imports);
-
-	            } catch (e) {
-	                if (module.headers.get('Content-Type') != 'application/wasm') {
-	                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
-
-	                } else {
-	                    throw e;
-	                }
-	            }
-	        }
-
-	        const bytes = await module.arrayBuffer();
-	        return await WebAssembly.instantiate(bytes, imports);
-
-	    } else {
-	        const instance = await WebAssembly.instantiate(module, imports);
-
-	        if (instance instanceof WebAssembly.Instance) {
-	            return { instance, module };
-
-	        } else {
-	            return instance;
-	        }
-	    }
+		const instance = await WebAssembly.instantiate(module, imports);
+		return { instance, module };
 	}
 
 	async function init(input) {
-	    if (typeof input === 'undefined') {
-	        input = new URL('aleo_wasm_bg.wasm', (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('index.js', document.baseURI).href)));
-	    }
 	    const imports = {};
 	    imports.wbg = {};
 	    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
@@ -978,13 +1047,8 @@
 	        return addHeapObject(ret);
 	    };
 
-	    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
-	        input = fetch(input);
-	    }
-
-
 
-	    const { instance, module } = await load(await input, imports);
+	    const { instance, module } = await load(input, imports);
 
 	    wasm = instance.exports;
 	    init.__wbindgen_wasm_module = module;
